@model CinemaMVC.Models.SessaoEditViewModel

@{
    ViewBag.Title = "Editar Dados Sessão";   
}

<div class="row">
    <div class="col-sm-6">
        <h3>@ViewBag.Title</h3>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Sessoes")">Sessões</a>
            </li>
            <li>
                <a href="@Url.Action("Index", "Filmes")">Filmes</a>
            </li>
            <li class="active">
                <strong>@ViewBag.Title</strong>
            </li>
        </ol>
    </div>    
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    @if (ViewBag.PostError != null)
    {
        <div class="w3-panel w3-warning" style="width:50%" id="PostError">
            <p id="spanError"><strong>@ViewBag.PostError</strong></p>
        </div>
    }

    <div class="w3-panel w3-warning" style="display:none;width:50%" id="panelError">
        <p id="spanError"><strong>Erro:</strong></p>
    </div>


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.SessaoID)

    <div class="form-group">
        @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @class = "form-control", @type = "date", @id = nameof(Model.Data), @onchange = "onChangeData()" } })

            @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SalaAudioAnimacaoID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.SalaAudioAnimacaoID, Model.SalaAudioAnimacaoSelectList, "Selecione...", htmlAttributes: new { @class = "form-control", @id = nameof(Model.SalaAudioAnimacaoID), @onchange = "ddListSalaAudioAnimChange()" })
            @Html.ValidationMessageFor(model => model.SalaAudioAnimacaoID, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-1">
            <a class="btn btn-primary btn-bitbucket" id="createSala" title="Você pode adicionar uma nova sala clicando aqui">
                <i class="fa fa-plus"></i>
            </a>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.FilmeID, "FilmeID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.FilmeID, Model.FilmeSelectList, "Selecione...", htmlAttributes: new { @class = "form-control", @id = nameof(Model.FilmeID), @onchange = "ddListFilmeChange()" })
            @Html.ValidationMessageFor(model => model.FilmeID, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-1">
            <a class="btn btn-primary btn-bitbucket" id="createFilme" title="Você pode adicionar uma nova sala clicando aqui">
                <i class="fa fa-plus"></i>
            </a>
        </div>
    </div>




    <hr>
    @Html.LabelFor(model => model.HorarioInicio, new { @class = "control-label col-md-2" })
    <div class="col-md-9">

        <div class="form-group">
            <div class="col-md-4">
                @Html.EditorFor(model => model.HorarioInicio, new { htmlAttributes = new { @class = "form-control", @type = "time", @id = nameof(Model.HorarioInicio), @onchange = "onChangeHoraInicio()" } })
                @Html.ValidationMessageFor(model => model.HorarioInicio, "", new { @class = "text-danger" })
                <div class="w3-panel w3-info intro" id="sugestaoHorarios" style="width:330px;display:none">
                    <p id="sugestaoHorariostexto"></p>
                </div>
            </div>
            <div class="col-md-8">
                <div class="form-group">
                    @Html.LabelFor(model => model.HorarioFim, new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.HorarioFim, new { htmlAttributes = new { @class = "form-control", @type = "time", @disabled = "disabled", @id = nameof(Model.HorarioFim) } })
                        @Html.ValidationMessageFor(model => model.HorarioFim, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
        <hr />
    </div>


    <div class="form-group">

        @Html.LabelFor(model => model.ValorIngresso, new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            <div class="input-group">
                <span class="input-group-addon">R$</span>
                @Html.TextBoxFor(model => model.ValorIngresso, new { @class = "form-control", @maxlength = 9, @type = "number" })
                <span class="input-group-addon">,00</span>
            </div>
            @Html.ValidationMessageFor(model => model.ValorIngresso, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="text-center">
        <div class="form-group">
            @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-warning" })
            <input type="submit" value="Salvar" id="btnEditar" class="btn btn-success" />
        </div>
    </div>

</div>
    }


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")


        <script type="text/javascript">
        $(function () {
            //$('.datepick').datetimepicker({
            //    format: 'L',
            //    ignoreReadonly: true
            //});
        });


        function ddListSalaAudioAnimChange()
        {
            try {

                GetDadosHorario();

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }
        }//end function

        function ddListFilmeChange()
        {
            try {

                GetDadosHorario();

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }
        }//end function

        function onChangeHoraInicio()
        {
            try {

                GetDadosHorario();

            } catch (e) {

                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }

        }//end function

        function onChangeData() {
            try {

                GetDadosHorario();

            } catch (e) {

                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }

        }//end function

        function GetDadosHorario()
        {
            cleanErrors();
            var filmeID = $("#@nameof(Model.FilmeID)").val();
            var horaInicio = $("#@nameof(Model.HorarioInicio)").val();
            var salaAudioAnimacaoID = $("#@nameof(Model.SalaAudioAnimacaoID)").val();
            var dataSessao = $("#@nameof(Model.Data)").val();

            if (typeof filmeID !== 'undefined' && filmeID != "" && filmeID != null && filmeID != 0 &&
                typeof horaInicio !== 'undefined' && horaInicio != "" && horaInicio != null)
            {
                //--faz ajax para calcular hora
                var url = "@Url.Action("GetDadosHorarioSessao")";

                var dados = { FilmeID: filmeID, HoraInicio: horaInicio, SalaAudioAnimacaoID: salaAudioAnimacaoID, DataSessao: dataSessao};
                $.post(url, dados, function (data)
                {
                    if (data !== "") {

                        if (typeof data.horaFinalValue !== 'undefined' && data.horaFinalValue != "" && data.horaFinalValue != null) {
                            $("#@nameof(Model.HorarioFim)").val(data.horaFinalValue);
                        }

                        if (typeof data.errorMessage !== 'undefined' && data.errorMessage != "" && data.errorMessage != null) {

                            //--desabilita botão de salvar
                            setErrorOnPage(data.errorMessage);

                            //--busca horários sugeridos
                            $("#sugestaoHorarios").show();
                            $('#sugestaoHorariostexto').html("[a ser implementado] <br /> Sugestão de horários : <br /> 09:00hs <br /> 14:00hs <br /> 19:00hs");

                            //--mostra mensagem de erro na tela
                            Swal.fire({
                                icon: 'error',
                                title: 'Aviso',
                                text: data.errorMessage
                            })
                        }

                    } else {
                        $("#@nameof(Model.HorarioFim)").val("");
                        cleanErrors();
                        Swal.fire({
                            icon: 'error',
                            title: 'Erro',
                            text: 'Não foi possível calcular o horário final'
                        })

                    }
                });

                //--atualiza field
            } else
            {
                //--atualiza field para zero
                $("#@nameof(Model.HorarioFim)").val("");
            }

        }//end function

        function cleanErrors() {
            $("#btnEditar").prop('disabled', false);
            $("#spanError").text('');
            $("#panelError").hide();
            $("#sugestaoHorariostexto").text('');
            $("#sugestaoHorarios").hide();
            $("#PostError").hide();
        }

        function setErrorOnPage(errorMessage)
        {
            $("#btnEditar").prop('disabled', true);
            $("#panelError").show();
            $("#spanError").text('Erro: ' + errorMessage);
        }

            $("#createSala").click(function createSala(botao) {

                Swal.fire({
                    icon: 'success',
                    title: 'Aviso',
                    text: 'Não implementado'
                })
            });

            $("#createFilme").click(function createFilme(botao) {

                Swal.fire({
                    icon: 'success',
                    title: 'Aviso',
                    text: 'Não implementado'
                })
            });

        </script>
    }
