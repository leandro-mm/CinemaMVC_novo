@model CinemaMVC.Models.SessaoEditViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Sessao</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.SessaoID)

        <div class="form-group">
            @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @class = "form-control", @type = "date", @id = nameof(Model.Data), @onchange = "onChangeData()" } })
                @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SalaAudioAnimacaoID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SalaAudioAnimacaoID, Model.SalaAudioAnimacaoSelectList, "Selecione...", htmlAttributes: new { @class = "form-control", @id = nameof(Model.SalaAudioAnimacaoID), @onchange = "ddListSalaAudioAnimChange()" })
                @Html.ValidationMessageFor(model => model.SalaAudioAnimacaoID, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FilmeID, "FilmeID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.FilmeID, Model.FilmeSelectList, "Selecione...", htmlAttributes: new { @class = "form-control", @id = nameof(Model.FilmeID), @onchange = "ddListFilmeChange()" })
                @Html.ValidationMessageFor(model => model.FilmeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ValorIngresso, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span class="input-group-addon">R$</span>
                @Html.EditorFor(model => model.ValorIngresso, new { htmlAttributes = new { @class = "form-control numberinput", @maxlength = 9 } })
                <span class="input-group-addon">,00</span>
                @Html.ValidationMessageFor(model => model.ValorIngresso, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HorarioInicio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HorarioInicio, new { htmlAttributes = new { @class = "form-control", @type = "time", @id = nameof(Model.HorarioInicio), @onchange = "onChangeHoraInicio()" } })
                @Html.ValidationMessageFor(model => model.HorarioInicio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HorarioFim, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HorarioFim, new { htmlAttributes = new { @class = "form-control", @type = "time", @disabled = "disabled", @id = nameof(Model.HorarioFim) } })
                @Html.ValidationMessageFor(model => model.HorarioFim, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script type="text/javascript">
        $(function () {
            $('.datepick').datetimepicker({
                format: 'L',
                ignoreReadonly: true
            });
        });


        function ddListSalaAudioAnimChange()
        {
            try {
                console.log('SalaAudioAnimacaoID '+ $("#@nameof(Model.SalaAudioAnimacaoID)").val());
                GetDadosHorario();

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }
        }//end function

        function ddListFilmeChange()
        {
            try {
                console.log('FilmeID '+ $("#@nameof(Model.FilmeID)").val());
                GetDadosHorario();

            } catch (e) {
                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }
        }//end function

        function onChangeHoraInicio()
        {
            try {
                console.log('HorarioInicio '+ $("#@nameof(Model.HorarioInicio)").val());
                GetDadosHorario();

            } catch (e) {

                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }

        }//end function

        function onChangeData() {
            try {
                console.log('Data '+ $("#@nameof(Model.Data)").val());
                GetDadosHorario();

            } catch (e) {

                Swal.fire({
                    icon: 'error',
                    title: 'Erro',
                    text: e
                })
            }

        }//end function

        function GetDadosHorario()
        {
            cleanErrors();
            var filmeID = $("#@nameof(Model.FilmeID)").val();
            var horaInicio = $("#@nameof(Model.HorarioInicio)").val();
            var salaAudioAnimacaoID = $("#@nameof(Model.SalaAudioAnimacaoID)").val();
            var dataSessao = $("#@nameof(Model.Data)").val();

            if (typeof filmeID !== 'undefined' && filmeID != "" && filmeID != null && filmeID != 0 &&
                typeof horaInicio !== 'undefined' && horaInicio != "" && horaInicio != null)
            {
                //--faz ajax para calcular hora
                var url = "@Url.Action("GetDadosHorarioSessao")";

                var dados = { FilmeID: filmeID, HoraInicio: horaInicio, SalaAudioAnimacaoID: salaAudioAnimacaoID, DataSessao: dataSessao};
                $.post(url, dados, function (data)
                {
                    if (data !== "") {

                        if (typeof data.horaFinalValue !== 'undefined' && data.horaFinalValue != "" && data.horaFinalValue != null) {
                            $("#@nameof(Model.HorarioFim)").val(data.horaFinalValue);
                        }

                        if (typeof data.errorMessage !== 'undefined' && data.errorMessage != "" && data.errorMessage != null) {

                            //--desabilita botão de salvar
                            setErrorOnPage(data.errorMessage);

                            //--mostra mensagem de erro na tela
                            Swal.fire({
                                icon: 'error',
                                title: 'Aviso',
                                text: data.errorMessage
                            })
                        }

                    } else {
                        $("#@nameof(Model.HorarioFim)").val("");
                        cleanErrors();
                        Swal.fire({
                            icon: 'error',
                            title: 'Erro',
                            text: 'Não foi possível calcular o horário final'
                        })

                    }
                });

                //--atualiza field
            } else
            {
                //--atualiza field para zero
                $("#@nameof(Model.HorarioFim)").val("");
            }

        }//end function

        function cleanErrors() {
            $("#btnSalvar").prop('disabled', false);
            $("#spanError").text('');
            $("#panelError").hide();
        }

        function setErrorOnPage(errorMessage)
        {
            $("#btnSalvar").prop('disabled', true);
            $("#panelError").show();
            $("#spanError").text('Erro: ' + errorMessage);
        }

    </script>
}
